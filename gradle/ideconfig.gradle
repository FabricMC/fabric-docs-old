apply plugin: 'idea'

idea {
	project {
		ipr {
			withXml {
				provider ->
					addIdeaCodeStyle(provider)
					addIdeaInspector(provider)
			}
		}
	}
}

static def addIdeaCodeStyle(provider) {
	def project = provider.asNode()

	def codeStyleNode = project.component.find {it.@name == 'ProjectCodeStyleSettingsManager'}

	if (!codeStyleNode) {
		codeStyleNode = project.appendNode('component', [name: 'ProjectCodeStyleSettingsManager'])
	}

	codeStyleNode.appendNode('option', [name: 'USE_PER_PROJECT_SETTINGS', value: 'true'])

	def projectSettingsNode = codeStyleNode.appendNode('option', [name: 'PER_PROJECT_SETTINGS']).appendNode('value')

	def codeStyleXml = new XmlParser().parseText("https://github.com/FabricMC/fabric-docs/raw/master/guidelines/intellij/FabricFormat.xml".toURL().text)

	codeStyleXml.each {node ->
		projectSettingsNode.append(node)
	}
}

static def addIdeaInspector(provider) {
	def project = provider.asNode()

	def inspectionsNode = project.component.find {it.@name == 'InspectionProjectProfileManager'}

	if (!inspectionsNode) {
		inspectionsNode = project.appendNode('component', [name: 'InspectionProjectProfileManager'])
	}

	def inspectorXml = new XmlParser().parseText("https://github.com/FabricMC/fabric-docs/raw/master/guidelines/intellij/FabricInspect.xml".toURL().text)

	def profile = inspectionsNode.appendNode 'profile', [version: '1.0', is_locked: false]

	inspectorXml.each {node ->
		profile.append(node)
	}

	inspectionsNode.appendNode 'option', [name: 'PROJECT_PROFILE', value: 'FabricInspect']
	inspectionsNode.appendNode 'option', [name: 'USE_PROJECT_PROFILE', value: true]
	inspectionsNode.appendNode 'version', [value: "1.0"]
}
